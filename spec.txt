-*- mode: outline -*-

* fetch(url)

Checks the cache for url.
  - If it exists, returns it
  - Else, starts a server_fetch() in background
    - Returns stub data immediately
    - When server_fetch() completes:
      - update_cache()
      - and re-render the page

* server_fetch(url, callback)
Grabs json from the server, runs callback on it when finished

* update_cache(object)
** Purpose
Recurses through the object and folds it into the cache.

** Code
If object has url field:
  If cache has no object there
    cache[url] = object
  Else
    Mutate cache[url] so it = object

Recurse:
  If object is array, on each element in array
  If object is hash, on each value in hash

  After each recursion, update element to the value returned in
  recursion.

Return cache[url] || object

** Questions
What if someone uses an array with a url field?  Is that possible?
Right now I'm assuming that if there's a URL field that this is a
hash.

** Future Optimizations
Over time, the cache will grow unbounded unless we start deleting
things.

We should keep track of the most recent observation per url, and
periodically sweep through and delete the oldest ones from the cache.

* save(object, ...)
 - update_cache(object, ...)
 - server_save(object, ...)
 - return cache[object.url]
* server_save(object, ...)
?? 

* Partially-Loaded Data
** URLs
Append "?loading" to indicate that data is incomplete:

   /proposal/34?loading

In future, we'll support partial data, like a summary:

   /proposal/34?summary

And then if it's loading the full proposal, it could look like:

   /proposal/34?summary&full=loading

** Storing it 
We don't use the ?___ stuff for caching.  So we'll have things like:

    cache['/proposal'] ==> {url: '/proposal?summary&full=loading'
                            ...}

** Rendering loading indicators
This will be automated in the future.  But for now, write an if
statement inside a component's render() function like this:

  render: function () {
             if (is_loading(this.props)) {
                 ... render loading indicator ...
             } else {
                 ... render normal stuff ...
             }
          }

* Future Optimizations & Improvements
** LocalStorage
